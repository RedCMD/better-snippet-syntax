- source: '{'
  scopesBegin:
    - meta.structure.dictionary.json.comments
  scopes:
    - punctuation.definition.dictionary.begin.json.comments
- source: /*
  scopesBegin:
    - comment.block.json.comments
  scopes:
    - punctuation.definition.comment.json.comments
- source: '    // Place your snippets for JavaScript here. Each snippet is defined under a snippet name and has a prefix, body and '
- source: '    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:'
- source: '    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the '
- source: '    // same ids are connected.'
- source: '    // Example:'
- source: '    "Print to console": {'
- source: '        "prefix": "log",'
- source: '        "body": ['
- source: '            "console.log(''$1'');",'
- source: '            "$2"'
- source: '        ],'
- source: '        "description": "Log output to console"'
- source: '    }'
- source: '*/'
  scopes:
    - punctuation.definition.comment.json.comments
  scopesEnd:
    - comment.block.json.comments
- source: '"'
  scopesBegin:
    - string.json.comments
    - support.type.property-name.json.comments
  scopes:
    - punctuation.support.type.property-name.begin.json.comments
- source: '1": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "no1",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
- source: ', // '
  scopesEnd:
    - string.quoted.double.json.comments
- source: \
- source: '        ],'
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "2": {'
- source: '        "prefix": "no2",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: \
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', // '
  scopes:
    - string.quoted.double.json.comments
- source: \
- source: '        ],'
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "3": {'
- source: '        "prefix": "no3",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: \\
  scopesBegin:
    - constant.character.escape.json.comments
- source: \\
  scopesEnd:
    - constant.character.escape.json.comments
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
- source: ', // '
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: '        ],'
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "4": {'
- source: '        "prefix": "no4",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: \\
  scopesBegin:
    - constant.character.escape.json.comments
- source: \\
  scopesEnd:
    - constant.character.escape.json.comments
- source: \
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', // '
  scopes:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: '        ],'
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "5": {'
- source: '        "prefix": "no5",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: \\
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: \\
  scopesBegin:
    - constant.character.escape.json.comments
- source: \\
  scopesEnd:
    - constant.character.escape.json.comments
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
- source: ','
- source: '        ],'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "6": {'
- source: '        "prefix": "no6",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: \\
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: \\
  scopesBegin:
    - constant.character.escape.json.comments
- source: \\
  scopesEnd:
    - constant.character.escape.json.comments
- source: \
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        ],'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "1.1": {'
- source: '        "prefix": "no2.1",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopesBegin:
    - string.regexp.insertion.escape.comments
    - punctuation.insertion.escape.escapee.comments
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: $
  scopesEnd:
    - string.regexp.insertion.escape.comments
    - punctuation.insertion.escape.escapee.comments
- source: '1'
  scopes:
    - string.quoted.double.json.comments
- source: '"'
  scopes:
    - punctuation.support.type.property-name.end.json.comments
  scopesEnd:
    - string.json.comments
    - support.type.property-name.json.comments
- source: ','
  scopes:
    - invalid.illegal.expected-dictionary-separator.json.comments
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' $1'
  scopesEnd:
    - comment.line.double-slash.js
- source: ']'
  scopesBegin:
    - invalid.illegal.expected-dictionary-separator.json.comments
- source: ','
  scopesEnd:
    - invalid.illegal.expected-dictionary-separator.json.comments
- source: '}'
  scopes:
    - punctuation.definition.dictionary.end.json.comments
  scopesEnd:
    - meta.structure.dictionary.json.comments
- source: ','
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: '2.2": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "no2.2",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: $1
  scopes:
    - variable.other.insertion.comments
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' \'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: '3.3": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "no2.3",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: \
  scopes:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: \
  scopesBegin:
    - string.quoted.double.json.comments
- source: $1
  scopesEnd:
    - string.quoted.double.json.comments
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' \$1'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: '4.4": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "no2.4",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: \\
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: $1
  scopes:
    - variable.other.insertion.comments
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' \\'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: '5.5": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "no2.5",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: \\
  scopesBegin:
    - constant.character.escape.json.comments
- source: \\
  scopesEnd:
    - constant.character.escape.json.comments
- source: \
  scopes:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: \
  scopesBegin:
    - string.quoted.double.json.comments
- source: $1
  scopesEnd:
    - string.quoted.double.json.comments
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ','
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: '6.6": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "no2.6",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: \\
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: \\
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: $1
  scopes:
    - variable.other.insertion.comments
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ','
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 'any1": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "any1",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopesBegin:
    - string.regexp.insertion.escape.comments
    - punctuation.insertion.escape.escapee.comments
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: $
  scopesEnd:
    - string.regexp.insertion.escape.comments
    - punctuation.insertion.escape.escapee.comments
- source: $1
  scopes:
    - variable.other.insertion.comments
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' $ and special'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 'any2": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "any2",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: \
  scopes:
    - string.quoted.double.json.comments
- source: \
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $1
  scopes:
    - variable.other.insertion.comments
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' \$ and special'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 'any3": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "any3",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: \
  scopes:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: \
  scopesBegin:
    - string.quoted.double.json.comments
- source: $
  scopesEnd:
    - string.quoted.double.json.comments
- source: $1
  scopes:
    - variable.other.insertion.comments
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' \$ and special'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 'any2.1": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "any2.1",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: \
  scopes:
    - string.quoted.double.json.comments
- source: \
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $abra
  scopes:
    - variable.other.insertion.comments
- source: ' 1", // '
  scopes:
    - string.quoted.double.json.comments
- source: \
- source: $
  scopesBegin:
    - string.quoted.double.json.comments
- source: ' and abra is special'
- source: '        ],'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "any3.1": {'
- source: '        "prefix": "any3.1",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: \
  scopes:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: \
  scopesBegin:
    - string.quoted.double.json.comments
- source: $
  scopesEnd:
    - string.quoted.double.json.comments
- source: $abra
  scopes:
    - variable.other.insertion.comments
- source: ' 1", // '
  scopes:
    - string.quoted.double.json.comments
- source: \
- source: $
  scopesBegin:
    - string.quoted.double.json.comments
- source: ' and abra is special'
- source: '        ],'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "any3.2": {'
- source: '        "prefix": "any3.2",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: \\
  scopesBegin:
    - constant.character.escape.json.comments
- source: \\
  scopesEnd:
    - constant.character.escape.json.comments
- source: \
  scopes:
    - string.quoted.double.json.comments
- source: \
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $abra
  scopes:
    - variable.other.insertion.comments
- source: ' 1", // '
  scopes:
    - string.quoted.double.json.comments
- source: \\
  scopesBegin:
    - string.regexp.insertion.escape.comments
    - punctuation.insertion.escape.escapee.comments
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: $
  scopesEnd:
    - string.regexp.insertion.escape.comments
    - punctuation.insertion.escape.escapee.comments
- source: ' and abra is special'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        ],'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "any3.3": {'
- source: '        "prefix": "any3.3",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: \\
  scopesBegin:
    - constant.character.escape.json.comments
- source: \\
  scopesEnd:
    - constant.character.escape.json.comments
- source: \
  scopes:
    - string.quoted.double.json.comments
- source: \
- source: $
  scopesBegin:
    - string.quoted.double.json.comments
- source: $
- source: ' 1", // '
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopesBegin:
    - string.regexp.insertion.escape.comments
    - punctuation.insertion.escape.escapee.comments
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: $
  scopesEnd:
    - string.regexp.insertion.escape.comments
    - punctuation.insertion.escape.escapee.comments
- source: $
  scopesBegin:
    - string.quoted.double.json.comments
- source: ' 1'
- source: '        ],'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "d1": {'
- source: '        "prefix": "d1",'
- source: '        "body": ['
- source: '            "$", // $'
- source: '        ],'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "d2": {'
- source: '        "prefix": "d2",'
- source: '        "body": ['
- source: '            "$$", // $$'
- source: '        ],'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "d3": {'
- source: '        "prefix": "d3",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopesBegin:
    - string.regexp.insertion.escape.comments
    - punctuation.insertion.escape.escapee.comments
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: $
  scopesEnd:
    - string.regexp.insertion.escape.comments
    - punctuation.insertion.escape.escapee.comments
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' $'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 'd4": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "d4",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: \
  scopes:
    - string.quoted.double.json.comments
- source: \
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' \$'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 'd5": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "d5",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: \
  scopes:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: \
  scopesBegin:
    - string.quoted.double.json.comments
- source: $
  scopesEnd:
    - string.quoted.double.json.comments
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' \$'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 'd1.1": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "d1.1",'
- source: '        "body": ['
- source: '            "$1", // special'
- source: '        ],'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "d2.1": {'
- source: '        "prefix": "d2.1",'
- source: '        "body": ['
- source: '            "$$1", // $ special'
- source: '        ],'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "d3.1": {'
- source: '        "prefix": "d3.1",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopesBegin:
    - string.regexp.insertion.escape.comments
    - punctuation.insertion.escape.escapee.comments
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: $
  scopesEnd:
    - string.regexp.insertion.escape.comments
    - punctuation.insertion.escape.escapee.comments
- source: '1'
  scopes:
    - string.quoted.double.json.comments
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' $'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 'd4.1": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "d4.1",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: $1
  scopes:
    - variable.other.insertion.comments
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' \$'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 'd5.1": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "d5.1",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: \
  scopes:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: \
  scopesBegin:
    - string.quoted.double.json.comments
- source: $1
  scopesEnd:
    - string.quoted.double.json.comments
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' \$'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 'any4": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "any4",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: \\
  scopesBegin:
    - constant.character.escape.json.comments
- source: \\
  scopesEnd:
    - constant.character.escape.json.comments
- source: \
  scopes:
    - string.quoted.double.json.comments
- source: \
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $1
  scopes:
    - variable.other.insertion.comments
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' \\'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 'any5": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "any5",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: \\
  scopesBegin:
    - constant.character.escape.json.comments
- source: \\
  scopesEnd:
    - constant.character.escape.json.comments
- source: \
  scopes:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: \
  scopesBegin:
    - string.quoted.double.json.comments
- source: $
  scopesEnd:
    - string.quoted.double.json.comments
- source: $1
  scopes:
    - variable.other.insertion.comments
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ','
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 'any6": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "any6",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: \\
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: \\
  scopesBegin:
    - constant.character.escape.json.comments
- source: \\
  scopesEnd:
    - constant.character.escape.json.comments
- source: \
  scopes:
    - string.quoted.double.json.comments
- source: \
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $1
  scopes:
    - variable.other.insertion.comments
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ','
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: '-1.0": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "n-1.0",'
- source: '        "body": ['
- source: '            "$$1", // $ and special'
- source: '        ],'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "-1.1": {'
- source: '        "prefix": "n-1.1",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopesBegin:
    - string.regexp.insertion.escape.comments
    - punctuation.insertion.escape.escapee.comments
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: $
  scopesEnd:
    - string.regexp.insertion.escape.comments
    - punctuation.insertion.escape.escapee.comments
- source: $1
  scopes:
    - variable.other.insertion.comments
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ','
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: '-1.2": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "n-1.2",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: \
  scopes:
    - string.quoted.double.json.comments
- source: \
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $1
  scopes:
    - variable.other.insertion.comments
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ','
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 'now": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "now",'
- source: '        "body": ['
- source: '            "(new Date()).getTime()",'
- source: '        ],'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "s0": {'
- source: '        "prefix": "s0",'
- source: '        "body": ['
- source: '            "${'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' ${}'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 's0.1": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "s0.1",'
- source: '        "body": ['
- source: '            "${:'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' ${:}'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 's0.2": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "s0.2",'
- source: '        "body": ['
- source: '            "${:a'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' ${:a}'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 's1": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "s1",'
- source: '        "body": ['
- source: '            "${0:'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' special'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 's2": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "s2",'
- source: '        "body": ['
- source: '            "${0:'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: '}'
  scopes:
    - string.quoted.double.json.comments
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' ${0:}'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 's3": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "s3",'
- source: '        "body": ['
- source: '            "${0:'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: \
  scopes:
    - string.quoted.double.json.comments
- source: '\}'
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' \ and special'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 's4": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "s4",'
- source: '        "body": ['
- source: '            "${0:'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: \\
  scopesBegin:
    - constant.character.escape.json.comments
- source: \\
  scopesEnd:
    - constant.character.escape.json.comments
- source: '}'
  scopes:
    - string.quoted.double.json.comments
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' ${0:\}'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 's5": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "s5",'
- source: '        "body": ['
- source: '            "${0:'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: \\
  scopesBegin:
    - constant.character.escape.json.comments
- source: \\
  scopesEnd:
    - constant.character.escape.json.comments
- source: \
  scopes:
    - string.quoted.double.json.comments
- source: '\}'
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' \\ and special'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 's6": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "s6",'
- source: '        "body": ['
- source: '            "${0:'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: \\
  scopesBegin:
    - constant.character.escape.json.comments
- source: \\
  scopesEnd:
    - constant.character.escape.json.comments
- source: \
  scopes:
    - string.quoted.double.json.comments
- source: \
- source: a
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' => \\a and special'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 's7": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "s7",'
- source: '        "body": ['
- source: '            "${0:'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: '}'
  scopes:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: \\
  scopesBegin:
    - constant.character.escape.json.comments
- source: \\
  scopesEnd:
    - constant.character.escape.json.comments
- source: a
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' => }\\a and special'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 's8": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "s8",'
- source: '        "body": ['
- source: '            "${0:'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: \
  scopes:
    - string.quoted.double.json.comments
- source: '\}'
- source: \\
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: \\
  scopesBegin:
    - constant.character.escape.json.comments
- source: \\
  scopesEnd:
    - constant.character.escape.json.comments
- source: a
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' => \\\a} and first slash special'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 's9": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "s9",'
- source: '        "body": ['
- source: '            "${0:'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: a
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' \a and special'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 's10": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "s10",'
- source: '        "body": ['
- source: '            "${0:'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: \
  scopes:
    - string.quoted.double.json.comments
- source: \
- source: a
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' \a and special'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 's11": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "s11",'
- source: '        "body": ['
- source: '            "${0:$'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' $'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 's12": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "s12",'
- source: '        "body": ['
- source: '            "${0:'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopesBegin:
    - string.regexp.insertion.escape.comments
    - punctuation.insertion.escape.escapee.comments
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: $
  scopesEnd:
    - string.regexp.insertion.escape.comments
    - punctuation.insertion.escape.escapee.comments
- source: '}'
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' $'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 's13": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "s13",'
- source: '        "body": ['
- source: '            "${0:'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: \
  scopes:
    - string.quoted.double.json.comments
- source: \
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' $'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 'now0.0": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "now",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: 'n'
  scopes:
    - string.quoted.double.json.comments
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' => \n'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 'now0.1": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "now",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: \
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' => \n'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 'now0.2": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "now",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: \
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' => \n'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 'now1.1": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "now",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopesBegin:
    - string.regexp.insertion.escape.comments
    - punctuation.insertion.escape.escapee.comments
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: $
  scopesEnd:
    - string.regexp.insertion.escape.comments
    - punctuation.insertion.escape.escapee.comments
- source: '1'
  scopes:
    - string.quoted.double.json.comments
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' => $1'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 'now1.2": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "now",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - punctuation.definition.comment.insertion.escape.comments
    - punctuation.insertion.escape.escaper.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: $1
  scopes:
    - variable.other.insertion.comments
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ', '
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' => \'
  scopesEnd:
    - comment.line.double-slash.js
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 'now5": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "now",'
- source: '        "body": ['
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: '}'
  scopes:
    - string.quoted.double.json.comments
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ','
- source: '        ],'
- source: '    },'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 'deno_hashbang": {'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        "prefix": "deno_hashbang",'
- source: '        "body": ['
- source: '            "#!/usr/bin/env sh",'
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopesBegin:
    - constant.character.escape.json.comments
- source: \\
  scopesEnd:
    - constant.character.escape.json.comments
- source: \
  scopes:
    - string.quoted.double.json.comments
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: \
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: ',`$$(echo --% '' |out-null)'
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ' >$$null;function :{'
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ';function dv{<#$${/*''>/dev/null )` 2>/dev/null;dv() { #>",'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '            "echo '
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: 1.22.0
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '; : --% '' |out-null <#'';'
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ;v=
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopesBegin:
    - string.quoted.double.json.comments
- source: $
- source: (dv)
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ;d=
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $HOME
  scopes:
    - variable.other.insertion.comments
- source: /.deno/$$v/bin/deno
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ';if [ -x '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $d
  scopes:
    - variable.other.insertion.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ' ];then exec '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $d
  scopes:
    - variable.other.insertion.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ' run -q -A '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $0
  scopes:
    - variable.other.insertion.comments
- source: \"
  scopesBegin:
    - constant.character.escape.json.comments
- source: \"
  scopesEnd:
    - constant.character.escape.json.comments
- source: $
  scopesBegin:
    - string.quoted.double.json.comments
- source: $
- source: '@'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ';elif [ -f '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $d
  scopes:
    - variable.other.insertion.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ' ];then chmod +x '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $d
  scopes:
    - variable.other.insertion.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ' && exec '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $d
  scopes:
    - variable.other.insertion.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ' run -q -A '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $0
  scopes:
    - variable.other.insertion.comments
- source: \"
  scopesBegin:
    - constant.character.escape.json.comments
- source: \"
  scopesEnd:
    - constant.character.escape.json.comments
- source: $
  scopesBegin:
    - string.quoted.double.json.comments
- source: $
- source: '@'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ;fi;bin_dir=
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $HOME
  scopes:
    - variable.other.insertion.comments
- source: /.deno/$$v/bin
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ;exe=
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $bin_dir
  scopes:
    - variable.other.insertion.comments
- source: /deno
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ';has() { command -v '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $1
  scopes:
    - variable.other.insertion.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ' >/dev/null; '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    ;if ! has unzip;then :;if ! has apt-get;then has brew && brew install
    unzip;else if [ 
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopesBegin:
    - string.quoted.double.json.comments
- source: $
- source: (whoami)
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ' = '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: root
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ' ];then apt-get install unzip -y;elif has sudo;then echo '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: 'Can I install unzip for you? (its required for this command to work) '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ';read ANSWER;echo;if [ '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $ANSWER
  scopes:
    - variable.other.insertion.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ' =~ ^[Yy] ];then sudo apt-get install unzip -y;fi;elif has doas;then echo '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: 'Can I install unzip for you? (its required for this command to work) '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ';read ANSWER;echo;if [ '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $ANSWER
  scopes:
    - variable.other.insertion.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ' =~ ^[Yy] ];then doas apt-get install unzip -y;fi;fi;fi;fi;if ! has unzip;then echo '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopesBegin:
    - constant.character.escape.json.comments
- source: \"
  scopesEnd:
    - constant.character.escape.json.comments
- source: ';echo '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: So I couldn't find an 'unzip' command
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ';echo '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: 'And I tried to auto install it, but it seems that failed'
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ';echo '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: (This script needs unzip and either curl or wget)
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ';echo '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: Please install the unzip command manually then re-run this script
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ';exit 1;fi;if [ '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $OS
  scopes:
    - variable.other.insertion.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ' = '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: Windows_NT
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ' ];then target='
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: x86_64-pc-windows-msvc
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ';else :; case $$(uname -sm) in '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: Darwin x86_64
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ) target=
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: x86_64-apple-darwin
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ' ;; '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: Darwin arm64
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ) target=
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: aarch64-apple-darwin
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ' ;; *) target='
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: x86_64-unknown-linux-gnu
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ' ;; esac;fi;deno_uri='
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: 'https://github.com/denoland/deno/releases/download/v$$v/deno-$$target.zip'
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ';if [ ! -d '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $bin_dir
  scopes:
    - variable.other.insertion.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ' ];then mkdir -p '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $bin_dir
  scopes:
    - variable.other.insertion.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ';fi;if has curl;then curl --fail --location --progress-bar --output '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $exe
  scopes:
    - variable.other.insertion.comments
- source: .zip
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopesBegin:
    - constant.character.escape.json.comments
- source: \"
  scopesEnd:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $deno_uri
  scopes:
    - variable.other.insertion.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ;elif has wget;then wget --output-document=
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $exe
  scopes:
    - variable.other.insertion.comments
- source: .zip
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopesBegin:
    - constant.character.escape.json.comments
- source: \"
  scopesEnd:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $deno_uri
  scopes:
    - variable.other.insertion.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ';else echo '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    Howdy! I looked for the 'curl' and for 'wget' commands but I didn't see
    either of them.
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ';echo '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: Please install one of them
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ';echo '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    Otherwise I have no way to install the missing deno version needed to run
    this code
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ';fi;unzip -d '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $bin_dir
  scopes:
    - variable.other.insertion.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ' -o '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $exe
  scopes:
    - variable.other.insertion.comments
- source: .zip
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ';chmod +x '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $exe
  scopes:
    - variable.other.insertion.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ';rm '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $exe
  scopes:
    - variable.other.insertion.comments
- source: .zip
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ';exec '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $d
  scopes:
    - variable.other.insertion.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ' run -q -A '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $0
  scopes:
    - variable.other.insertion.comments
- source: \"
  scopesBegin:
    - constant.character.escape.json.comments
- source: \"
  scopesEnd:
    - constant.character.escape.json.comments
- source: $
  scopesBegin:
    - string.quoted.double.json.comments
- source: $
- source: '@'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '; #>'
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ';$$DenoInstall = '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopesBegin:
    - string.quoted.double.json.comments
- source: $
- source: '{HOME'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: .
  scopesBegin:
    - string.quoted.double.json.comments
- source: deno$$(dv)
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ';$$BinDir = '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $DenoInstall
  scopes:
    - variable.other.insertion.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: b
  scopesBegin:
    - string.quoted.double.json.comments
- source: in
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '; $$DenoExe = '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $BinDir
  scopes:
    - variable.other.insertion.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: d
  scopesBegin:
    - string.quoted.double.json.comments
- source: eno.exe
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '; if (-not(Test-Path -Path '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $DenoExe
  scopes:
    - variable.other.insertion.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ' -PathType Leaf)) { $$DenoZip = '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $BinDir
  scopes:
    - variable.other.insertion.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: d
  scopesBegin:
    - string.quoted.double.json.comments
- source: eno.zip
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ';$$DenoUri = '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    https://github.com/denoland/deno/releases/download/v$$(dv)/deno-x86_64-pc-windows-msvc.zip
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    ;[Net.ServicePointManager]::SecurityProtocol=[Net.SecurityProtocolType]::Tls12;if(!(Test-Path
    $$BinDir)){ New-Item $$BinDir -ItemType Directory |Out-Null;
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    ;curl.exe -Lo $$DenoZip $$DenoUri;tar.exe xf $$DenoZip -C $$BinDir;
    Remove-Item $$DenoZip;$$User = [EnvironmentVariableTarget]::User; $$Path =
    [Environment]::GetEnvironmentVariable('Path', $$User); if (!(
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ;$$Path;
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '.ToLower() -like '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '*;$$BinDir;*'
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '.ToLower())) { [Environment]::SetEnvironmentVariable(''Path'', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $Path
  scopes:
    - variable.other.insertion.comments
- source: ;$$BinDir
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', $$User); $$Env:Path += '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ;$$BinDir
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '; '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: '}'
- source: '; & '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $DenoExe
  scopes:
    - variable.other.insertion.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ' run -q -A '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $
  scopes:
    - string.quoted.double.json.comments
- source: $PSCommandPath
  scopes:
    - variable.other.insertion.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ' @args; Exit $$LastExitCode;# */0'
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: '`;",'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '            "// */'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: '`",'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        ],'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "forof loop": {'
- source: '        "prefix": "forof",'
- source: '        "body": ['
- source: '            "for (let each of $0) {",'
- source: '            "    ",'
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: '        ],'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 'description": "creates a for loop"'
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "forentries loop": {'
- source: '        "prefix": "forentries",'
- source: '        "body": ['
- source: '            "for (const [key, value] of Object.entries($0)) {",'
- source: '                "",'
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: '        ],'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 'description": "creates a for loop"'
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "import lodash": {'
- source: '        "prefix": "import lodash",'
- source: '        "body": ['
- source: '            "const _ = (await import(''https://cdn.skypack.dev/lodash''))",'
- source: '        ],'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "import path": {'
- source: '        "prefix": "import path",'
- source: '        "body": ['
- source: '            "const Path = await import(''https://deno.land/std@0.117.0/path/mod.ts'')",'
- source: '        ],'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "import itertools": {'
- source: '        "prefix": "import itertools",'
- source: '        "body": ['
- source: '            "const { enumerate, pairwise '
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ' = await import(''https://deno.land/x/itertools@v1.0.2/mod.ts'')",'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '            "const { zip, unzip, flattenDeep: flatten, flatten: flattenOnce '
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ' = (await import(''https://cdn.skypack.dev/lodash''))",'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        ],'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "csv import": {'
- source: '        "prefix": "csv import",'
- source: '        "body": ['
- source: '            "const { readCSV '
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ' = await import(''https://deno.land/x/csv@v0.5.1/mod.ts'')",'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        ],'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "dataframe import": {'
- source: '        "prefix": "dataframe import",'
- source: '        "body": ['
- source: '            "const { DataFrame '
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ' = (await import(''https://cdn.skypack.dev/@!!!!!/polarbear@1.0.2'')).default",'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        ],'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "throw": {'
- source: '        "prefix": "throw",'
- source: '        "body": ['
- source: '            "throw Error(`$0`)",'
- source: '        ],'
- source: '        "description": "creates a for loop"'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "forin loop": {'
- source: '        "prefix": "forin",'
- source: '        "body": ['
- source: '            "for (let each in $0) {",'
- source: '            "    ",'
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: '        ],'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 'description": "creates a for loop"'
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "forawait loop": {'
- source: '        "prefix": "forawait",'
- source: '        "body": ['
- source: '            "for await (let each of $0) {",'
- source: '            "    ",'
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: '        ],'
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 'description": "creates a for await loop"'
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "async": {'
- source: '        "prefix": "async",'
- source: '        "body": ['
- source: '            ";((async ()=>{$0'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ')())",'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        ],'
- source: '        "description": "creates a called async method"'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "promise": {'
- source: '        "prefix": "Promise",'
- source: '        "body": ['
- source: '            "new Promise((resolve, reject)=>{",'
- source: '            "    $0",'
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: )"
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        ],'
- source: '        "description": "creates a promise"'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "Deno": {'
- source: '        "prefix": "Deno",'
- source: '        "body": ['
- source: '            "Deno.",'
- source: '        ],'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "jsdoc": {'
- source: '        "prefix": "jsdoc",'
- source: '        "body": ['
- source: '            "/**",'
- source: '            " * Function that does something",'
- source: '            " *",'
- source: '            " * @param {Object'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ' parameter1 - which should be a",'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '            " * @return {Boolean'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ' the output is a",'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '            " *",'
- source: '            " * @example",'
- source: '            " *     does something",'
- source: '            " */"'
- source: '        ],'
- source: '        "description": "creates documentation"'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "override the function snippet": {'
- source: '        "prefix": "function",'
- source: '        "body": ['
- source: '            "function$0"'
- source: '        ],'
- source: '        "description": "just types function"'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "Print to console": {'
- source: '        "prefix": "print",'
- source: '        "body": ['
- source: '            "console.log(`$0`)"'
- source: '        ],'
- source: '        "description": "Log output to console"'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "output a var": {'
- source: '        "prefix": "out",'
- source: '        "body": ['
- source: '            "console.debug(`$0 is:`,$0)"'
- source: '        ],'
- source: '        "description": "Debug output to console"'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "Show some output": {'
- source: '        "prefix": "show",'
- source: '        "body": ['
- source: '            "show(`$0`)"'
- source: '        ],'
- source: '        "description": "Log output using the (custom) show function"'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "glob": {'
- source: '        "prefix": "import glob",'
- source: '        "body": ['
- source: '            "// npm install glob",'
- source: '            "// const glob = require('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: glob
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ')",'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '            "result = glob.sync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '**/*.js'
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', {dot:true,nodir:false, ignore:[]'
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: )"
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        ],'
- source: '        "description": "Find groups of files"'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "webassembly": {'
- source: '        "prefix": "import webassembly",'
- source: '        "body": ['
- source: '            "const env = {",'
- source: '            "    memoryBase: 0,",'
- source: '            "    tableBase: 0,",'
- source: '            "    memory: new WebAssembly.Memory({",'
- source: '            "      initial: 256",'
- source: '            "    '
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: '),",'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '            "    table: new WebAssembly.Table({",'
- source: '            "      initial: 0,",'
- source: '            "      element: ''anyfunc''",'
- source: '            "    '
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '            "  '
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ','
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ','
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 'WebAssembly.instantiate(typedArray, {",'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '            "  env: env",'
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ').then(result => {",'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '            "  console.log(util.inspect(result, true, 0))",'
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        ],'
- source: '        "description": "setup a webassembly import"'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    "proxy": {'
- source: '        "prefix": "proxy",'
- source: '        "body": ['
- source: '            "const originalThing = ()=>{'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ','
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: 'const proxySymbol = Symbol.for(''Proxy'')",'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '            "const thisProxySymbol = Symbol(''thisProxy'')",'
- source: '            "// originalThing[Symbol.iterator]      // used by for..of loops and spread syntax.",'
- source: '            "// originalThing[Symbol.toPrimitive]",'
- source: '            "const proxyObject = new Proxy(originalThing, {",'
- source: '            "    // Object.keys",'
- source: '            "    ownKeys(target, ...args) { return Reflect.ownKeys(target, ...args) '
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ',",'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '            "    // function call (original value needs to be a function)",'
- source: '            "    apply(original, context, ...args) { console.log(args) '
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ',",'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '            "    // new operator (original value needs to be a class)",'
- source: '            "    construct(original, args, originalConstructor) {'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ',",'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '            "    get(original, key, ...args) {",'
- source: '            "        if (key == proxySymbol||key == thisProxySymbol) {return true'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ','
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: '        return Reflect.get(original, key, ...args)",'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '            "    '
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ',",'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '            "    set(original, key, ...args) {",'
- source: '            "        if (key == proxySymbol||key == thisProxySymbol) {return'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ','
- source: '"'
  scopesBegin:
    - string.quoted.double.json.comments
  scopes:
    - punctuation.definition.string.begin.json.comments
- source: '        return Reflect.set(original, key, ...args)",'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '            "    '
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ',",'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '            "    has: Reflect.has,",'
- source: '            "    deleteProperty: Reflect.deleteProperty,",'
- source: '            "    isExtensible: Reflect.isExtensible,",'
- source: '            "    preventExtensions: Reflect.preventExtensions,",'
- source: '            "    setPrototypeOf: Reflect.setPrototypeOf,",'
- source: '            "    defineProperty: Reflect.defineProperty,",'
- source: '            "    getPrototypeOf: Reflect.getPrototypeOf,",'
- source: '            "    getOwnPropertyDescriptor: Reflect.getOwnPropertyDescriptor,",'
- source: '            "'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",'
  scopesBegin:
    - string.quoted.double.json.comments
- source: '        ],'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // '
- source: '    // Deno'
- source: '    // '
- source: '    // "Deno.chdir.1"               : { "prefix": "Deno-chdir('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /home/userA
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                       
    "body": "Deno.chdir(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /home/userA
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                        
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.chdir.2"               : { "prefix": "Deno-chdir('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ../userB
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                          
    "body": "Deno.chdir(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ../userB
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                           
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.chdir.3"               : { "prefix": "Deno-chdir('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: 'C:'
  scopes:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: \
  scopes:
    - string.quoted.double.json.comments
- source: \
- source: >-
    Program Files
    (x86)",                                                                            
    "body": "Deno.chdir(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: 'C:'
  scopes:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: \
  scopes:
    - string.quoted.double.json.comments
- source: \
- source: Program Files (x86
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                             
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.chmod.4"               : { "prefix": "Deno-chmod('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /path/to/file
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    ,
    0o666)",                                                                              
    "body": "Deno.chmod(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /path/to/file
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', 0o666'
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                               
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.chmodSync.5"           : { "prefix": "Deno-chmodSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /path/to/file
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    ,
    0o666)",                                                                          
    "body": "Deno.chmodSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /path/to/file
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', 0o666'
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                           
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.chown.6"               : { "prefix": "Deno-chown('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: myFile.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    , 1000,
    1002)",                                                                            
    "body": "Deno.chown(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: myFile.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', 1000, 1002'
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                             
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.chownSync.7"           : { "prefix": "Deno-chownSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: myFile.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    , 1000,
    1002)",                                                                        
    "body": "Deno.chownSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: myFile.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', 1000, 1002'
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",                                                                         '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.open.8"                : { "prefix": "Deno-open('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                        
    "body": "Deno.open(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                         
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.close.9"               : { "prefix": "Deno-close(file.rid)",                                                                                               "body": "Deno.close(${1:file.rid'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                               
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.connect.10"            : { "prefix": "Deno-connect({ port: 80 '
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                        
    "body": "Deno.connect(${1:{ port: 80 
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: >-
    )",                                                                                         
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.connect.11"            : { "prefix": "Deno-connect({ hostname: '
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: 192.0.2.1
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', port: 80 '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                "body":
    "Deno.connect(${1:{ hostname: 
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: 192.0.2.1
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', port: 80 '
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                                                '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.connect.12"            : { "prefix": "Deno-connect({ hostname: '
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '[2001:db8::1]'
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', port: 80 '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                            "body":
    "Deno.connect(${1:{ hostname: 
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '[2001:db8::1]'
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', port: 80 '
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                                            '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.connect.13"            : { "prefix": "Deno-connect({ hostname: '
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: golang.org
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', port: 80, transport: '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: tcp
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                           "body": "Deno.connect(${1:{
    hostname: 
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: golang.org
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', port: 80, transport: '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: tcp
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}}'
- source: ')",                                           '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.readTextFile.14"       : { "prefix": "Deno-readTextFile('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ./certs/my_custom_root_CA.pem
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                               "body":
    "Deno.readTextFile(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ./certs/my_custom_root_CA.pem
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: ')",                                                               '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.connectTls.15"         : { "prefix": "Deno-connectTls({ port: 80 '
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                     
    "body": "Deno.connectTls(${1:{ port: 80 
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: >-
    )",                                                                                      
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.connectTls.16"         : { "prefix": "Deno-connectTls({ caCerts: [caCert], hostname: '
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: 192.0.2.1
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', port: 80 '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                          "body": "Deno.connectTls(${1:{
    caCerts: [caCert], hostname: 
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: 192.0.2.1
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', port: 80 '
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                          '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.connectTls.17"         : { "prefix": "Deno-connectTls({ hostname: '
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '[2001:db8::1]'
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', port: 80 '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                         "body":
    "Deno.connectTls(${1:{ hostname: 
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '[2001:db8::1]'
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', port: 80 '
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                                         '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.connectTls.18"         : { "prefix": "Deno-connectTls({ caCerts: [caCert], hostname: '
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: golang.org
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', port: 80'
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                          "body": "Deno.connectTls(${1:{
    caCerts: [caCert], hostname: 
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: golang.org
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', port: 80'
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                          '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.open.19"               : { "prefix": "Deno-open('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                        
    "body": "Deno.open(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                         
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.copy.20"               : { "prefix": "Deno-copy(source, Deno.stdout)",                                                                                     "body": "Deno.copy(${1:source, Deno.stdout'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                     
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.create.21"             : { "prefix": "Deno-create('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file_2.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                    
    "body": "Deno.create(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file_2.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                     
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.copy.22"               : { "prefix": "Deno-copy(source, destination)",                                                                                     "body": "Deno.copy(${1:source, destination'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                     
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.copyFile.23"           : { "prefix": "Deno-copyFile('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: from.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: to.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                           
    "body": "Deno.copyFile(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: from.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: to.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                            
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.copyFileSync.24"       : { "prefix": "Deno-copyFileSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: from.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: to.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                       
    "body": "Deno.copyFileSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: from.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: to.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: ')",                                                                        '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.create.25"             : { "prefix": "Deno-create('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /foo/bar.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                     
    "body": "Deno.create(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /foo/bar.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                      
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.createSync.26"         : { "prefix": "Deno-createSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /foo/bar.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                 
    "body": "Deno.createSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /foo/bar.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                  
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.execPath.27"           : { "prefix": "Deno-execPath())",                                                                                                   "body": "Deno.execPath(${1:)'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                                   
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.exit.28"               : { "prefix": "Deno-exit(5)",                                                                                                       "body": "Deno.exit(${1:5'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                                       
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.open.29"               : { "prefix": "Deno-open('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { read: true, write: true, create: true '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",                                              "body": "Deno.open(${1:'
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { read: true, write: true, create: true '
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                              '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.write.30"              : { "prefix": "Deno-write(file.rid, new TextEncoder()",                                                                             "body": "Deno.write(${1:file.rid, new TextEncoder('
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                             
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.fdatasync.31"          : { "prefix": "Deno-fdatasync(file.rid)",                                                                                           "body": "Deno.fdatasync(${1:file.rid'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                           
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.readFile.32"           : { "prefix": "Deno-readFile('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                    
    "body": "Deno.readFile(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                     
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.open.33"               : { "prefix": "Deno-open('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { read: true '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                           
    "body": "Deno.open(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { read: true '
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: >-
    )",                                                                            
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.fstat.34"              : { "prefix": "Deno-fstat(file.rid)",                                                                                               "body": "Deno.fstat(${1:file.rid'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                               
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.openSync.35"           : { "prefix": "Deno-openSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { read: true '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                       
    "body": "Deno.openSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { read: true '
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                                                        '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.fstatSync.36"          : { "prefix": "Deno-fstatSync(file.rid)",                                                                                           "body": "Deno.fstatSync(${1:file.rid'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                           
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.open.37"               : { "prefix": "Deno-open('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { read: true, write: true, create: true '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",                                              "body": "Deno.open(${1:'
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { read: true, write: true, create: true '
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                              '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.write.38"              : { "prefix": "Deno-write(file.rid, new TextEncoder()",                                                                             "body": "Deno.write(${1:file.rid, new TextEncoder('
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                             
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.ftruncate.39"          : { "prefix": "Deno-ftruncate(file.rid, 1)",                                                                                        "body": "Deno.ftruncate(${1:file.rid, 1'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                        
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.fsync.40"              : { "prefix": "Deno-fsync(file.rid)",                                                                                               "body": "Deno.fsync(${1:file.rid'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                               
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.readFile.41"           : { "prefix": "Deno-readFile('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                    
    "body": "Deno.readFile(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                     
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.openSync.42"           : { "prefix": "Deno-openSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { read: true, write: true, create: true '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",                                          "body": "Deno.openSync(${1:'
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { read: true, write: true, create: true '
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                          '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.writeSync.43"          : { "prefix": "Deno-writeSync(file.rid, new TextEncoder()",                                                                         "body": "Deno.writeSync(${1:file.rid, new TextEncoder('
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",                                                                         '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.ftruncateSync.44"      : { "prefix": "Deno-ftruncateSync(file.rid, 1)",                                                                                    "body": "Deno.ftruncateSync(${1:file.rid, 1'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                    
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.fsyncSync.45"          : { "prefix": "Deno-fsyncSync(file.rid)",                                                                                           "body": "Deno.fsyncSync(${1:file.rid'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                           
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.readFileSync.46"       : { "prefix": "Deno-readFileSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                
    "body": "Deno.readFileSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                 
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.open.47"               : { "prefix": "Deno-open('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { read: true, write: true, create: true '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",                                              "body": "Deno.open(${1:'
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { read: true, write: true, create: true '
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                              '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.ftruncate.48"          : { "prefix": "Deno-ftruncate(file.rid)",                                                                                           "body": "Deno.ftruncate(${1:file.rid'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                           
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.open.49"               : { "prefix": "Deno-open('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { read: true, write: true, create: true '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",                                              "body": "Deno.open(${1:'
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { read: true, write: true, create: true '
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                              '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.write.50"              : { "prefix": "Deno-write(file.rid, new TextEncoder()",                                                                             "body": "Deno.write(${1:file.rid, new TextEncoder('
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                             
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.ftruncate.51"          : { "prefix": "Deno-ftruncate(file.rid, 7)",                                                                                        "body": "Deno.ftruncate(${1:file.rid, 7'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                        
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.read.52"               : { "prefix": "Deno-read(file.rid, data)",                                                                                          "body": "Deno.read(${1:file.rid, data'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                          
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.openSync.53"           : { "prefix": "Deno-openSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { read: true, write: true, truncate: true, create: true '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",                          "body": "Deno.openSync(${1:'
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { read: true, write: true, truncate: true, create: true '
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                          '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.ftruncateSync.54"      : { "prefix": "Deno-ftruncateSync(file.rid)",                                                                                       "body": "Deno.ftruncateSync(${1:file.rid'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                       
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.openSync.55"           : { "prefix": "Deno-openSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { read: true, write: true, create: true '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",                                          "body": "Deno.openSync(${1:'
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { read: true, write: true, create: true '
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                          '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.writeSync.56"          : { "prefix": "Deno-writeSync(file.rid, new TextEncoder()",                                                                         "body": "Deno.writeSync(${1:file.rid, new TextEncoder('
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",                                                                         '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.ftruncateSync.57"      : { "prefix": "Deno-ftruncateSync(file.rid, 7)",                                                                                    "body": "Deno.ftruncateSync(${1:file.rid, 7'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                    
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.seekSync.58"           : { "prefix": "Deno-seekSync(file.rid, 0, Deno.SeekMode.Start)",                                                                    "body": "Deno.seekSync(${1:file.rid, 0, Deno.SeekMode.Start'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",                                                                    '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.readSync.59"           : { "prefix": "Deno-readSync(file.rid, data)",                                                                                      "body": "Deno.readSync(${1:file.rid, data'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                      
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.inspect.60"            : { "prefix": "Deno-inspect(obj)",                                                                                                  "body": "Deno.inspect(${1:obj'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                                  
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.inspect.61"            : { "prefix": "Deno-inspect(new A()",                                                                                               "body": "Deno.inspect(${1:new A('
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                               
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.inspect.62"            : { "prefix": "Deno-inspect({a: {b: {c: {d: ''hello'''
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}}}}'
- source: ', {depth: 2'
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                              "body":
    "Deno.inspect(${1:{a: {b: {c: {d: 'hello'
  scopes:
    - string.quoted.double.json.comments
- source: '}}}}'
- source: ', {depth: 2'
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                                              '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.openSync.63"           : { "prefix": "Deno-openSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                    
    "body": "Deno.openSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                     
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.openSync.64"           : { "prefix": "Deno-openSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /dev/tty6
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                      
    "body": "Deno.openSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /dev/tty6
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                       
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.isatty.65"             : { "prefix": "Deno-isatty(nonTTYRid)",                                                                                             "body": "Deno.isatty(${1:nonTTYRid'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                             
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.isatty.66"             : { "prefix": "Deno-isatty(ttyRid)",                                                                                                "body": "Deno.isatty(${1:ttyRid'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                                
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.close.67"              : { "prefix": "Deno-close(nonTTYRid)",                                                                                              "body": "Deno.close(${1:nonTTYRid'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                              
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.close.68"              : { "prefix": "Deno-close(ttyRid)",                                                                                                 "body": "Deno.close(${1:ttyRid'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                                 
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.open.69"               : { "prefix": "Deno-open('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /etc/passwd
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                        
    "body": "Deno.open(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /etc/passwd
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                         
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.iter.70"               : { "prefix": "Deno-iter(f)",                                                                                                       "body": "Deno.iter(${1:f'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                                       
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.open.71"               : { "prefix": "Deno-open('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /etc/passwd
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                        
    "body": "Deno.open(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /etc/passwd
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                         
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.iter.72"               : { "prefix": "Deno-iter(f, {'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: '  bufSize: 1024 * 1024'
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                        
    "body": "Deno.iter(${1:f, {
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: '  bufSize: 1024 * 1024'
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: '}}'
- source: ')",                                                                         '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.openSync.73"           : { "prefix": "Deno-openSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /etc/passwd
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                    
    "body": "Deno.openSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /etc/passwd
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                     
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.iterSync.74"           : { "prefix": "Deno-iterSync(f)",                                                                                                   "body": "Deno.iterSync(${1:f'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                                   
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.open.75"               : { "prefix": "Deno-open('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /etc/passwd
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                        
    "body": "Deno.open(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /etc/passwd
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                         
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.iterSync.76"           : { "prefix": "Deno-iterSync(f, {'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: '  bufSize: 1024 * 1024'
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                    
    "body": "Deno.iterSync(${1:f, {
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: '  bufSize: 1024 * 1024'
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: '}}'
- source: ')",                                                                     '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.run.77"                : { "prefix": "Deno-run({'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: '   cmd: ['
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: sleep
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '10000'
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ']'
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                   
    "body": "Deno.run(${1:{
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: '   cmd: ['
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: sleep
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '10000'
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ']'
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: '}}'
- source: ')",                                                                    '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.kill.78"               : { "prefix": "Deno-kill(p.pid, '
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: SIGINT
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                      
    "body": "Deno.kill(${1:p.pid, 
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: SIGINT
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                       
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.link.79"               : { "prefix": "Deno-link('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: old/name
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: new/name
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                             
    "body": "Deno.link(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: old/name
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: new/name
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                              
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.linkSync.80"           : { "prefix": "Deno-linkSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: old/name
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: new/name
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                         
    "body": "Deno.linkSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: old/name
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: new/name
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                          
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.listen.81"             : { "prefix": "Deno-listen({ port: 80 '
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                         
    "body": "Deno.listen(${1:{ port: 80 
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: >-
    )",                                                                                          
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.listen.82"             : { "prefix": "Deno-listen({ hostname: '
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: 192.0.2.1
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', port: 80 '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                 "body":
    "Deno.listen(${1:{ hostname: 
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: 192.0.2.1
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', port: 80 '
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                                                 '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.listen.83"             : { "prefix": "Deno-listen({ hostname: '
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '[2001:db8::1]'
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', port: 80 '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                             "body":
    "Deno.listen(${1:{ hostname: 
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '[2001:db8::1]'
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', port: 80 '
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                                             '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.listen.84"             : { "prefix": "Deno-listen({ hostname: '
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: golang.org
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', port: 80, transport: '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: tcp
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                            "body": "Deno.listen(${1:{
    hostname: 
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: golang.org
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', port: 80, transport: '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: tcp
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}}'
- source: ')",                                            '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.listenTls.85"          : { "prefix": "Deno-listenTls({ port: 443, certFile: '
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ./server.crt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', keyFile: '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ./server.key
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                               "body": "Deno.listenTls(${1:{ port: 443,
    certFile: 
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ./server.crt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', keyFile: '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ./server.key
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}}'
- source: ')",                               '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.lstat.86"              : { "prefix": "Deno-lstat('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                         
    "body": "Deno.lstat(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                          
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.lstatSync.87"          : { "prefix": "Deno-lstatSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                     
    "body": "Deno.lstatSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                      
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.makeTempDir.88"        : { "prefix": "Deno-makeTempDir();  // e.g. /tmp/2894ea76'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: 'const tempDirName1 = await Deno.makeTempDir({ prefix: ''my_temp'' '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",     "body": "Deno.makeTempDir(${1:);  // e.g. /tmp/2894ea76'
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: 'const tempDirName1 = await Deno.makeTempDir({ prefix: ''my_temp'' '
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",     '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.makeTempDirSync.89"    : { "prefix": "Deno-makeTempDirSync();  // e.g. /tmp/2894ea76'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: 'const tempDirName1 = Deno.makeTempDirSync({ prefix: ''my_temp'' '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",   "body": "Deno.makeTempDirSync(${1:);  // e.g. /tmp/2894ea76'
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: 'const tempDirName1 = Deno.makeTempDirSync({ prefix: ''my_temp'' '
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",   '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.makeTempFile.90"       : { "prefix": "Deno-makeTempFile();  // e.g. /tmp/419e0bf2'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: 'const tmpFileName1 = await Deno.makeTempFile({ prefix: ''my_temp'' '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",   "body": "Deno.makeTempFile(${1:);  // e.g. /tmp/419e0bf2'
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: 'const tmpFileName1 = await Deno.makeTempFile({ prefix: ''my_temp'' '
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",   '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.makeTempFileSync.91"   : { "prefix": "Deno-makeTempFileSync(); // e.g. /tmp/419e0bf2'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: 'const tempFileName1 = Deno.makeTempFileSync({ prefix: ''my_temp'' '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ')", "body": "Deno.makeTempFileSync(${1:); // e.g. /tmp/419e0bf2'
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: 'const tempFileName1 = Deno.makeTempFileSync({ prefix: ''my_temp'' '
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')", '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.metrics.92"            : { "prefix": "Deno-metrics())",                                                                                                    "body": "Deno.metrics(${1:)'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                                    
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.mkdir.93"              : { "prefix": "Deno-mkdir('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: new_dir
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                           
    "body": "Deno.mkdir(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: new_dir
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                            
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.mkdir.94"              : { "prefix": "Deno-mkdir('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: nested/directories
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { recursive: true '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                            "body":
    "Deno.mkdir(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: nested/directories
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { recursive: true '
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                                            '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.mkdir.95"              : { "prefix": "Deno-mkdir('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: restricted_access_dir
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { mode: 0o700 '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                             "body":
    "Deno.mkdir(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: restricted_access_dir
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { mode: 0o700 '
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                                             '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.mkdirSync.96"          : { "prefix": "Deno-mkdirSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: new_dir
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                       
    "body": "Deno.mkdirSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: new_dir
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                        
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.mkdirSync.97"          : { "prefix": "Deno-mkdirSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: nested/directories
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { recursive: true '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                        "body":
    "Deno.mkdirSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: nested/directories
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { recursive: true '
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                                        '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.mkdirSync.98"          : { "prefix": "Deno-mkdirSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: restricted_access_dir
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { mode: 0o700 '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                         "body":
    "Deno.mkdirSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: restricted_access_dir
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { mode: 0o700 '
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                                         '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.open.99"               : { "prefix": "Deno-open('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /foo/bar.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { read: true, write: true '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                           "body":
    "Deno.open(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /foo/bar.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { read: true, write: true '
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                                           '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.close.100"             : { "prefix": "Deno-close(file.rid)",                                                                                               "body": "Deno.close(${1:file.rid'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                               
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.openSync.101"          : { "prefix": "Deno-openSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /foo/bar.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { read: true, write: true '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                       "body":
    "Deno.openSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /foo/bar.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { read: true, write: true '
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                                       '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.close.102"             : { "prefix": "Deno-close(file.rid)",                                                                                               "body": "Deno.close(${1:file.rid'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                               
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.open.103"              : { "prefix": "Deno-open('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /foo/bar.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                       
    "body": "Deno.open(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /foo/bar.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                        
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.read.104"              : { "prefix": "Deno-read(file.rid, buf)",                                                                                           "body": "Deno.read(${1:file.rid, buf'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                           
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.close.105"             : { "prefix": "Deno-close(file.rid)",                                                                                               "body": "Deno.close(${1:file.rid'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                               
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.readAll.106"           : { "prefix": "Deno-readAll(Deno.stdin)",                                                                                           "body": "Deno.readAll(${1:Deno.stdin'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                           
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.open.107"              : { "prefix": "Deno-open('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', {read: true'
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                          
    "body": "Deno.open(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', {read: true'
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: >-
    )",                                                                           
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.readAll.108"           : { "prefix": "Deno-readAll(file)",                                                                                                 "body": "Deno.readAll(${1:file'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                                 
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.close.109"             : { "prefix": "Deno-close(file.rid)",                                                                                               "body": "Deno.close(${1:file.rid'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                               
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.Buffer.110"            : { "prefix": "Deno-Buffer(myData.buffer as ArrayBuffer)",                                                                          "body": "Deno.Buffer(${1:myData.buffer as ArrayBuffer'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                          
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.readAll.111"           : { "prefix": "Deno-readAll(reader)",                                                                                               "body": "Deno.readAll(${1:reader'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                               
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.readAllSync.112"       : { "prefix": "Deno-readAllSync(Deno.stdin)",                                                                                       "body": "Deno.readAllSync(${1:Deno.stdin'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                       
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.openSync.113"          : { "prefix": "Deno-openSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', {read: true'
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                      
    "body": "Deno.openSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', {read: true'
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                                                       '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.readAllSync.114"       : { "prefix": "Deno-readAllSync(file)",                                                                                             "body": "Deno.readAllSync(${1:file'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                             
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.close.115"             : { "prefix": "Deno-close(file.rid)",                                                                                               "body": "Deno.close(${1:file.rid'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                               
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.Buffer.116"            : { "prefix": "Deno-Buffer(myData.buffer as ArrayBuffer)",                                                                          "body": "Deno.Buffer(${1:myData.buffer as ArrayBuffer'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                          
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.readAllSync.117"       : { "prefix": "Deno-readAllSync(reader)",                                                                                           "body": "Deno.readAllSync(${1:reader'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                           
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.readDir.118"           : { "prefix": "Deno-readDir('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                               
    "body": "Deno.readDir(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                                
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.readDirSync.119"       : { "prefix": "Deno-readDirSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                           
    "body": "Deno.readDirSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                            
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.readFile.120"          : { "prefix": "Deno-readFile('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                      
    "body": "Deno.readFile(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                       
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.readFileSync.121"      : { "prefix": "Deno-readFileSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                  
    "body": "Deno.readFileSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                   
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.symlink.122"           : { "prefix": "Deno-symlink('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ./test.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ./test_link.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                  "body":
    "Deno.symlink(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ./test.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ./test_link.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: ')",                                                                  '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.readLink.123"          : { "prefix": "Deno-readLink('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ./test_link.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                
    "body": "Deno.readLink(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ./test_link.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                 
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.symlinkSync.124"       : { "prefix": "Deno-symlinkSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ./test.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ./test_link.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                              "body":
    "Deno.symlinkSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ./test.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ./test_link.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: ')",                                                              '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.readLinkSync.125"      : { "prefix": "Deno-readLinkSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ./test_link.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                            
    "body": "Deno.readLinkSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ./test_link.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                             
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.openSync.126"          : { "prefix": "Deno-openSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /foo/bar.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                   
    "body": "Deno.openSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /foo/bar.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                    
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.readSync.127"          : { "prefix": "Deno-readSync(file.rid, buf)",                                                                                       "body": "Deno.readSync(${1:file.rid, buf'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                       
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.close.128"             : { "prefix": "Deno-close(file.rid)",                                                                                               "body": "Deno.close(${1:file.rid'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                               
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.readTextFile.129"      : { "prefix": "Deno-readTextFile('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                  
    "body": "Deno.readTextFile(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                   
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.readTextFileSync.130"  : { "prefix": "Deno-readTextFileSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                              
    "body": "Deno.readTextFileSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                               
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.symlink.131"           : { "prefix": "Deno-symlink('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: symlink_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                  
    "body": "Deno.symlink(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: symlink_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: ')",                                                                   '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.realPath.132"          : { "prefix": "Deno-realPath('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ./file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                     
    "body": "Deno.realPath(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ./file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                      
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.realPath.133"          : { "prefix": "Deno-realPath('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ./symlink_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                             
    "body": "Deno.realPath(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ./symlink_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                              
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.symlinkSync.134"       : { "prefix": "Deno-symlinkSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: symlink_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                               "body":
    "Deno.symlinkSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: symlink_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: ')",                                                               '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.realPathSync.135"      : { "prefix": "Deno-realPathSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ./file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                 
    "body": "Deno.realPathSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ./file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                  
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.realPathSync.136"      : { "prefix": "Deno-realPathSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ./symlink_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                         
    "body": "Deno.realPathSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ./symlink_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                          
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.remove.137"            : { "prefix": "Deno-remove('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /path/to/empty_dir/or/file
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                       
    "body": "Deno.remove(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /path/to/empty_dir/or/file
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: ')",                                                                        '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.remove.138"            : { "prefix": "Deno-remove('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /path/to/populated_dir/or/file
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { recursive: true '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",                                               "body": "Deno.remove(${1:'
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /path/to/populated_dir/or/file
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { recursive: true '
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                               '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.removeSync.139"        : { "prefix": "Deno-removeSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /path/to/empty_dir/or/file
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                   
    "body": "Deno.removeSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /path/to/empty_dir/or/file
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: ')",                                                                    '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.removeSync.140"        : { "prefix": "Deno-removeSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /path/to/populated_dir/or/file
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { recursive: true '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",                                           "body": "Deno.removeSync(${1:'
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /path/to/populated_dir/or/file
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { recursive: true '
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                           '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.rename.141"            : { "prefix": "Deno-rename('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: old/path
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: new/path
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                           
    "body": "Deno.rename(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: old/path
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: new/path
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                            
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.renameSync.142"        : { "prefix": "Deno-renameSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: old/path
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: new/path
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                       
    "body": "Deno.renameSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: old/path
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: new/path
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: ')",                                                                        '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.resources.143"         : { "prefix": "Deno-resources())",                                                                                                  "body": "Deno.resources(${1:)'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                                  
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.openSync.144"          : { "prefix": "Deno-openSync(''../test.file'')",                                                                                      "body": "Deno.openSync(${1:''../test.file'''
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                      
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.resources.145"         : { "prefix": "Deno-resources())",                                                                                                  "body": "Deno.resources(${1:)'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                                  
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.run.146"               : { "prefix": "Deno-run({'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: '  cmd: ['
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: echo
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '],'
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                     
    "body": "Deno.run(${1:{
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: '  cmd: ['
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: echo
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '],'
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: '}}'
- source: ')",                                                                      '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.open.147"              : { "prefix": "Deno-open(''hello.txt'', {read: true, write: true, truncate: true, create: true'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                    "body": "Deno.open(${1:'hello.txt',
    {read: true, write: true, truncate: true, create: true
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                    '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.write.148"             : { "prefix": "Deno-write(file.rid, new TextEncoder()",                                                                             "body": "Deno.write(${1:file.rid, new TextEncoder('
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                             
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.seek.149"              : { "prefix": "Deno-seek(file.rid, 6, Deno.SeekMode.Start)",                                                                        "body": "Deno.seek(${1:file.rid, 6, Deno.SeekMode.Start'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",                                                                        '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.open.150"              : { "prefix": "Deno-open(''hello.txt'', {read: true, write: true, truncate: true, create: true'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                    "body": "Deno.open(${1:'hello.txt',
    {read: true, write: true, truncate: true, create: true
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                    '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.write.151"             : { "prefix": "Deno-write(file.rid, new TextEncoder()",                                                                             "body": "Deno.write(${1:file.rid, new TextEncoder('
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                             
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.seek.152"              : { "prefix": "Deno-seek(file.rid, 6, Deno.SeekMode.Start)",                                                                        "body": "Deno.seek(${1:file.rid, 6, Deno.SeekMode.Start'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",                                                                        '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.seek.153"              : { "prefix": "Deno-seek(file.rid, 2, Deno.SeekMode.Current)",                                                                      "body": "Deno.seek(${1:file.rid, 2, Deno.SeekMode.Current'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",                                                                      '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.seek.154"              : { "prefix": "Deno-seek(file.rid, -2, Deno.SeekMode.End)",                                                                         "body": "Deno.seek(${1:file.rid, -2, Deno.SeekMode.End'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",                                                                         '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.openSync.155"          : { "prefix": "Deno-openSync(''hello.txt'', {read: true, write: true, truncate: true, create: true'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                "body": "Deno.openSync(${1:'hello.txt',
    {read: true, write: true, truncate: true, create: true
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.writeSync.156"         : { "prefix": "Deno-writeSync(file.rid, new TextEncoder()",                                                                         "body": "Deno.writeSync(${1:file.rid, new TextEncoder('
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",                                                                         '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.seekSync.157"          : { "prefix": "Deno-seekSync(file.rid, 6, Deno.SeekMode.Start)",                                                                    "body": "Deno.seekSync(${1:file.rid, 6, Deno.SeekMode.Start'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",                                                                    '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.openSync.158"          : { "prefix": "Deno-openSync(''hello.txt'', {read: true, write: true, truncate: true, create: true'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                "body": "Deno.openSync(${1:'hello.txt',
    {read: true, write: true, truncate: true, create: true
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.writeSync.159"         : { "prefix": "Deno-writeSync(file.rid, new TextEncoder()",                                                                         "body": "Deno.writeSync(${1:file.rid, new TextEncoder('
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",                                                                         '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.seekSync.160"          : { "prefix": "Deno-seekSync(file.rid, 6, Deno.SeekMode.Start)",                                                                    "body": "Deno.seekSync(${1:file.rid, 6, Deno.SeekMode.Start'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",                                                                    '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.seekSync.161"          : { "prefix": "Deno-seekSync(file.rid, 2, Deno.SeekMode.Current)",                                                                  "body": "Deno.seekSync(${1:file.rid, 2, Deno.SeekMode.Current'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",                                                                  '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.seekSync.162"          : { "prefix": "Deno-seekSync(file.rid, -2, Deno.SeekMode.End)",                                                                     "body": "Deno.seekSync(${1:file.rid, -2, Deno.SeekMode.End'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",                                                                     '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.listen.163"            : { "prefix": "Deno-listen({ port: 80 '
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                         
    "body": "Deno.listen(${1:{ port: 80 
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: >-
    )",                                                                                          
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.serveHttp.164"         : { "prefix": "Deno-serveHttp(await conn.accept()",                                                                                 "body": "Deno.serveHttp(${1:await conn.accept('
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                 
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.serveHttp.165"         : { "prefix": "Deno-serveHttp(conn)",                                                                                               "body": "Deno.serveHttp(${1:conn'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                               
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.listen.166"            : { "prefix": "Deno-listen({ port: 80 '
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                         
    "body": "Deno.listen(${1:{ port: 80 
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: >-
    )",                                                                                          
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.listen.167"            : { "prefix": "Deno-listen({ port: 80 '
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                         
    "body": "Deno.listen(${1:{ port: 80 
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: >-
    )",                                                                                          
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.shutdown.168"          : { "prefix": "Deno-shutdown(conn.rid)",                                                                                            "body": "Deno.shutdown(${1:conn.rid'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                            
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.connect.169"           : { "prefix": "Deno-connect({ port: 80, hostname: '
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: 127.0.0.1
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                "body":
    "Deno.connect(${1:{ port: 80, hostname: 
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: 127.0.0.1
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}}'
- source: ')",                                                                '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.readTextFile.170"      : { "prefix": "Deno-readTextFile('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ./certs/my_custom_root_CA.pem
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                               "body":
    "Deno.readTextFile(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ./certs/my_custom_root_CA.pem
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: ')",                                                               '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.startTls.171"          : { "prefix": "Deno-startTls(conn, { caCerts: [caCert], hostname: '
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: localhost
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                "body":
    "Deno.startTls(${1:conn, { caCerts: [caCert], hostname: 
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: localhost
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}}'
- source: ')",                                                '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.stat.172"              : { "prefix": "Deno-stat('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                          
    "body": "Deno.stat(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                           
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.statSync.173"          : { "prefix": "Deno-statSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                      
    "body": "Deno.statSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                       
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.symlink.174"           : { "prefix": "Deno-symlink('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: old/name
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: new/name
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                          
    "body": "Deno.symlink(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: old/name
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: new/name
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                           
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.symlinkSync.175"       : { "prefix": "Deno-symlinkSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: old/name
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: new/name
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                      
    "body": "Deno.symlinkSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: old/name
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: new/name
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: ')",                                                                       '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.test.176"              : { "prefix": "Deno-test({'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: '  name: '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: example test
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ','
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: '  fn()",                                                                     "body": "Deno.test(${1:{'
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: '  name: '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: example test
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ','
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: '  fn('
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",                                                                     '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.test.177"              : { "prefix": "Deno-test({'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: '  name: '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: example ignored test
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ','
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: '  ignore: Deno.build.os === '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: windows
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ','
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: '  fn()",                   "body": "Deno.test(${1:{'
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: '  name: '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: example ignored test
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ','
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: '  ignore: Deno.build.os === '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: windows
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ','
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: '  fn('
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",                   '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.test.178"              : { "prefix": "Deno-test({'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: '  name: '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: example async test
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ','
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: '  async fn()",                                                         "body": "Deno.test(${1:{'
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: '  name: '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: example async test
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ','
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: '  async fn('
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",                                                         '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.readFile.179"          : { "prefix": "Deno-readFile('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello_world.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                
    "body": "Deno.readFile(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello_world.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                 
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.truncate.180"          : { "prefix": "Deno-truncate('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                    
    "body": "Deno.truncate(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                     
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.makeTempFile.181"      : { "prefix": "Deno-makeTempFile();'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: >-
    await Deno.writeFile(file, new
    TextEncoder()",                                                 "body":
    "Deno.makeTempFile(${1:);
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: 'await Deno.writeFile(file, new TextEncoder('
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",                                                 '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.truncate.182"          : { "prefix": "Deno-truncate(file, 7)",                                                                                             "body": "Deno.truncate(${1:file, 7'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                             
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.readFile.183"          : { "prefix": "Deno-readFile(file)",                                                                                                "body": "Deno.readFile(${1:file'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                                
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.truncateSync.184"      : { "prefix": "Deno-truncateSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                
    "body": "Deno.truncateSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: my_file.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                 
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.makeTempFileSync.185"  : { "prefix": "Deno-makeTempFileSync();'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: >-
    Deno.writeFileSync(file, new
    TextEncoder()",                                               "body":
    "Deno.makeTempFileSync(${1:);
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: 'Deno.writeFileSync(file, new TextEncoder('
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",                                               '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.truncateSync.186"      : { "prefix": "Deno-truncateSync(file, 7)",                                                                                         "body": "Deno.truncateSync(${1:file, 7'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                         
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.readFileSync.187"      : { "prefix": "Deno-readFileSync(file)",                                                                                            "body": "Deno.readFileSync(${1:file'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                            
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.listen.188"            : { "prefix": "Deno-listen({ port: 80 '
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                         
    "body": "Deno.listen(${1:{ port: 80 
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: >-
    )",                                                                                          
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.serveHttp.189"         : { "prefix": "Deno-serveHttp(await conn.accept()",                                                                                 "body": "Deno.serveHttp(${1:await conn.accept('
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                 
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.upgradeWebSocket.190"  : { "prefix": "Deno-upgradeWebSocket(e.request)",                                                                                   "body": "Deno.upgradeWebSocket(${1:e.request'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                   
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.watchFs.191"           : { "prefix": "Deno-watchFs('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                               
    "body": "Deno.watchFs(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                                
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.watchFs.192"           : { "prefix": "Deno-watchFs('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                                                               
    "body": "Deno.watchFs(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: >-
    )",                                                                                                
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.open.193"              : { "prefix": "Deno-open('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /foo/bar.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { write: true '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                      
    "body": "Deno.open(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /foo/bar.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', { write: true '
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                                                       '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.write.194"             : { "prefix": "Deno-write(file.rid, data)",                                                                                         "body": "Deno.write(${1:file.rid, data'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                         
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.close.195"             : { "prefix": "Deno-close(file.rid)",                                                                                               "body": "Deno.close(${1:file.rid'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                               
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.writeAll.196"          : { "prefix": "Deno-writeAll(Deno.stdout, contentBytes)",                                                                           "body": "Deno.writeAll(${1:Deno.stdout, contentBytes'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                           
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.open.197"              : { "prefix": "Deno-open(''test.file'', {write: true'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                             
    "body": "Deno.open(${1:'test.file', {write: true
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: >-
    )",                                                                              
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.writeAll.198"          : { "prefix": "Deno-writeAll(file, contentBytes)",                                                                                  "body": "Deno.writeAll(${1:file, contentBytes'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                  
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.close.199"             : { "prefix": "Deno-close(file.rid)",                                                                                               "body": "Deno.close(${1:file.rid'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                               
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.Buffer.200"            : { "prefix": "Deno-Buffer();'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: >-
    await Deno.writeAll(writer,
    contentBytes)",                                                         
    "body": "Deno.Buffer(${1:);
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: 'await Deno.writeAll(writer, contentBytes'
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",                                                          '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.writeAllSync.201"      : { "prefix": "Deno-writeAllSync(Deno.stdout, contentBytes)",                                                                       "body": "Deno.writeAllSync(${1:Deno.stdout, contentBytes'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",                                                                       '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.openSync.202"          : { "prefix": "Deno-openSync(''test.file'', {write: true'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                         
    "body": "Deno.openSync(${1:'test.file', {write: true
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: >-
    )",                                                                          
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.writeAllSync.203"      : { "prefix": "Deno-writeAllSync(file, contentBytes)",                                                                              "body": "Deno.writeAllSync(${1:file, contentBytes'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                              
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.close.204"             : { "prefix": "Deno-close(file.rid)",                                                                                               "body": "Deno.close(${1:file.rid'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                               
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.Buffer.205"            : { "prefix": "Deno-Buffer();'
  scopesEnd:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: >-
    Deno.writeAllSync(writer,
    contentBytes)",                                                           
    "body": "Deno.Buffer(${1:);
  scopes:
    - string.quoted.double.json.comments
- source: \n
  scopes:
    - constant.character.escape.json.comments
- source: 'Deno.writeAllSync(writer, contentBytes'
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ')",                                                            '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.writeFile.206"         : { "prefix": "Deno-writeFile('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello1.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    ,
    data)",                                                                              
    "body": "Deno.writeFile(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello1.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', data'
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                               
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.writeFile.207"         : { "prefix": "Deno-writeFile('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello2.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', data, {create: false'
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                              "body":
    "Deno.writeFile(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello2.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', data, {create: false'
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                                              '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.writeFile.208"         : { "prefix": "Deno-writeFile('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello3.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', data, {mode: 0o777'
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                "body":
    "Deno.writeFile(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello3.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', data, {mode: 0o777'
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                                                '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.writeFile.209"         : { "prefix": "Deno-writeFile('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello4.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', data, {append: true'
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                               "body":
    "Deno.writeFile(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello4.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', data, {append: true'
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                                               '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.writeFileSync.210"     : { "prefix": "Deno-writeFileSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello1.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    ,
    data)",                                                                          
    "body": "Deno.writeFileSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello1.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', data'
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                           
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.writeFileSync.211"     : { "prefix": "Deno-writeFileSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello2.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', data, {create: false'
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                          "body":
    "Deno.writeFileSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello2.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', data, {create: false'
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                                          '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.writeFileSync.212"     : { "prefix": "Deno-writeFileSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello3.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', data, {mode: 0o777'
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                            "body":
    "Deno.writeFileSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello3.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', data, {mode: 0o777'
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                                            '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.writeFileSync.213"     : { "prefix": "Deno-writeFileSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello4.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', data, {append: true'
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                           "body":
    "Deno.writeFileSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello4.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', data, {append: true'
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                                           '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.openSync.214"          : { "prefix": "Deno-openSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /foo/bar.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', {write: true'
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                    
    "body": "Deno.openSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: /foo/bar.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', {write: true'
  scopes:
    - string.quoted.double.json.comments
- source: '}}'
- source: ')",                                                                     '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.writeSync.215"         : { "prefix": "Deno-writeSync(file.rid, data)",                                                                                     "body": "Deno.writeSync(${1:file.rid, data'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                     
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.close.216"             : { "prefix": "Deno-close(file.rid)",                                                                                               "body": "Deno.close(${1:file.rid'
  scopesEnd:
    - string.quoted.double.json.comments
- source: '}'
- source: >-
    )",                                                                                               
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.writeTextFile.217"     : { "prefix": "Deno-writeTextFile('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello1.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: Hello world
  scopes:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: 'n'
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                             "body":
    "Deno.writeTextFile(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello1.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: Hello world
  scopes:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: 'n'
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: ')",                                                             '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // "Deno.writeTextFileSync.218" : { "prefix": "Deno-writeTextFileSync('
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello1.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: Hello world
  scopes:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: 'n'
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: >-
    )",                                                         "body":
    "Deno.writeTextFileSync(${1:
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: hello1.txt
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: ', '
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: Hello world
  scopes:
    - string.quoted.double.json.comments
- source: \\
  scopes:
    - constant.character.escape.json.comments
- source: 'n'
  scopes:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '}'
- source: ')",                                                         '
  scopes:
    - string.quoted.double.json.comments
- source: '}'
- source: ','
  scopesBegin:
    - string.quoted.double.json.comments
- source: '    // // '
- source: '    // // html/jsx'
- source: '    // // '
- source: '    // "style_attribute": {  "prefix": "style", "body": [ "style='
  scopesEnd:
    - string.quoted.double.json.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: $0
  scopes:
    - variable.other.insertion.comments
- source: \"
  scopes:
    - constant.character.escape.json.comments
- source: '"'
  scopes:
    - punctuation.definition.string.end.json.comments
  scopesEnd:
    - string.quoted.double.json.comments
- source: ' ], },'
- source: //
  scopesBegin:
    - comment.line.double-slash.js
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "class_attribute": {  "prefix": "class", "body": [ "class=\"$0\"" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' // '
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' // HTML tags'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' // '
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "a": {  "prefix": "a", "body": [ "<a>$0</a>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "abbr": {  "prefix": "abbr", "body": [ "<abbr>$0</abbr>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "acronym": {  "prefix": "acronym", "body": [ "<acronym>$0</acronym>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "address": {  "prefix": "address", "body": [ "<address>$0</address>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "applet": {  "prefix": "applet", "body": [ "<applet>$0</applet>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "area": {  "prefix": "area", "body": [ "<area>$0</area>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "article": {  "prefix": "article", "body": [ "<article>$0</article>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "aside": {  "prefix": "aside", "body": [ "<aside>$0</aside>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "audio": {  "prefix": "audio", "body": [ "<audio>$0</audio>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "b": {  "prefix": "b", "body": [ "<b>$0</b>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "base": {  "prefix": "base", "body": [ "<base>$0</base>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "basefont": {  "prefix": "basefont", "body": [ "<basefont>$0</basefont>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "bdi": {  "prefix": "bdi", "body": [ "<bdi>$0</bdi>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "bdo": {  "prefix": "bdo", "body": [ "<bdo>$0</bdo>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "big": {  "prefix": "big", "body": [ "<big>$0</big>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "blockquote": {  "prefix": "blockquote", "body": [ "<blockquote>$0</blockquote>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "body": {  "prefix": "body", "body": [ "<body>$0</body>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "br": {  "prefix": "br", "body": [ "<br>$0</br>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "button": {  "prefix": "button", "body": [ "<button>$0</button>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "canvas": {  "prefix": "canvas", "body": [ "<canvas>$0</canvas>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "caption": {  "prefix": "caption", "body": [ "<caption>$0</caption>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "center": {  "prefix": "center", "body": [ "<center>$0</center>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "cite": {  "prefix": "cite", "body": [ "<cite>$0</cite>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "code": {  "prefix": "code", "body": [ "<code>$0</code>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "col": {  "prefix": "col", "body": [ "<col>$0</col>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "colgroup": {  "prefix": "colgroup", "body": [ "<colgroup>$0</colgroup>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "data": {  "prefix": "data", "body": [ "<data>$0</data>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "datalist": {  "prefix": "datalist", "body": [ "<datalist>$0</datalist>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "dd": {  "prefix": "dd", "body": [ "<dd>$0</dd>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "del": {  "prefix": "del", "body": [ "<del>$0</del>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "details": {  "prefix": "details", "body": [ "<details>$0</details>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "dfn": {  "prefix": "dfn", "body": [ "<dfn>$0</dfn>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "dialog": {  "prefix": "dialog", "body": [ "<dialog>$0</dialog>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "dir": {  "prefix": "dir", "body": [ "<dir>$0</dir>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "div": {  "prefix": "div", "body": [ "<div>$0</div>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "dl": {  "prefix": "dl", "body": [ "<dl>$0</dl>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "dt": {  "prefix": "dt", "body": [ "<dt>$0</dt>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "em": {  "prefix": "em", "body": [ "<em>$0</em>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "embed": {  "prefix": "embed", "body": [ "<embed>$0</embed>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "fieldset": {  "prefix": "fieldset", "body": [ "<fieldset>$0</fieldset>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "figcaption": {  "prefix": "figcaption", "body": [ "<figcaption>$0</figcaption>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "figure": {  "prefix": "figure", "body": [ "<figure>$0</figure>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "font": {  "prefix": "font", "body": [ "<font>$0</font>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "footer": {  "prefix": "footer", "body": [ "<footer>$0</footer>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "form": {  "prefix": "form", "body": [ "<form>$0</form>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "frame": {  "prefix": "frame", "body": [ "<frame>$0</frame>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "frameset": {  "prefix": "frameset", "body": [ "<frameset>$0</frameset>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "h1": {  "prefix": "h1", "body": [ "<h1>$0</h1>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "h2": {  "prefix": "h2", "body": [ "<h2>$0</h2>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "h3": {  "prefix": "h3", "body": [ "<h3>$0</h3>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "h4": {  "prefix": "h4", "body": [ "<h4>$0</h4>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "h5": {  "prefix": "h5", "body": [ "<h5>$0</h5>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "h6": {  "prefix": "h6", "body": [ "<h6>$0</h6>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "head": {  "prefix": "head", "body": [ "<head>$0</head>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "header": {  "prefix": "header", "body": [ "<header>$0</header>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "hr": {  "prefix": "hr", "body": [ "<hr>$0</hr>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "html": {  "prefix": "html", "body": [ "<html>$0</html>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "i": {  "prefix": "i", "body": [ "<i>$0</i>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "iframe": {  "prefix": "iframe", "body": [ "<iframe>$0</iframe>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "img": {  "prefix": "img", "body": [ "<img>$0</img>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "input": {  "prefix": "input", "body": [ "<input>$0</input>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "ins": {  "prefix": "ins", "body": [ "<ins>$0</ins>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "kbd": {  "prefix": "kbd", "body": [ "<kbd>$0</kbd>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "label": {  "prefix": "label", "body": [ "<label>$0</label>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "legend": {  "prefix": "legend", "body": [ "<legend>$0</legend>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "li": {  "prefix": "li", "body": [ "<li>$0</li>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "link": {  "prefix": "link", "body": [ "<link>$0</link>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "main": {  "prefix": "main", "body": [ "<main>$0</main>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "map": {  "prefix": "map", "body": [ "<map>$0</map>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "mark": {  "prefix": "mark", "body": [ "<mark>$0</mark>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "meta": {  "prefix": "meta", "body": [ "<meta>$0</meta>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "meter": {  "prefix": "meter", "body": [ "<meter>$0</meter>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "nav": {  "prefix": "nav", "body": [ "<nav>$0</nav>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "noframes": {  "prefix": "noframes", "body": [ "<noframes>$0</noframes>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "noscript": {  "prefix": "noscript", "body": [ "<noscript>$0</noscript>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "object": {  "prefix": "object", "body": [ "<object>$0</object>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "ol": {  "prefix": "ol", "body": [ "<ol>$0</ol>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "optgroup": {  "prefix": "optgroup", "body": [ "<optgroup>$0</optgroup>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "option": {  "prefix": "option", "body": [ "<option>$0</option>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "output": {  "prefix": "output", "body": [ "<output>$0</output>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "p": {  "prefix": "p", "body": [ "<p>$0</p>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "param": {  "prefix": "param", "body": [ "<param>$0</param>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "picture": {  "prefix": "picture", "body": [ "<picture>$0</picture>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "pre": {  "prefix": "pre", "body": [ "<pre>$0</pre>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "progress": {  "prefix": "progress", "body": [ "<progress>$0</progress>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "q": {  "prefix": "q", "body": [ "<q>$0</q>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "rp": {  "prefix": "rp", "body": [ "<rp>$0</rp>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "rt": {  "prefix": "rt", "body": [ "<rt>$0</rt>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "ruby": {  "prefix": "ruby", "body": [ "<ruby>$0</ruby>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "s": {  "prefix": "s", "body": [ "<s>$0</s>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "samp": {  "prefix": "samp", "body": [ "<samp>$0</samp>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "script": {  "prefix": "script", "body": [ "<script>$0</script>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "section": {  "prefix": "section", "body": [ "<section>$0</section>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "select": {  "prefix": "select", "body": [ "<select>$0</select>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "small": {  "prefix": "small", "body": [ "<small>$0</small>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "source": {  "prefix": "source", "body": [ "<source>$0</source>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "span": {  "prefix": "span", "body": [ "<span>$0</span>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "strike": {  "prefix": "strike", "body": [ "<strike>$0</strike>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "strong": {  "prefix": "strong", "body": [ "<strong>$0</strong>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' // "style": {  "prefix": "style", "body": [ "<style>$0</style>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "sub": {  "prefix": "sub", "body": [ "<sub>$0</sub>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "summary": {  "prefix": "summary", "body": [ "<summary>$0</summary>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "sup": {  "prefix": "sup", "body": [ "<sup>$0</sup>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "table": {  "prefix": "table", "body": [ "<table>$0</table>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "tbody": {  "prefix": "tbody", "body": [ "<tbody>$0</tbody>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "td": {  "prefix": "td", "body": [ "<td>$0</td>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "template": {  "prefix": "template", "body": [ "<template>$0</template>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "textarea": {  "prefix": "textarea", "body": [ "<textarea>$0</textarea>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "tfoot": {  "prefix": "tfoot", "body": [ "<tfoot>$0</tfoot>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "th": {  "prefix": "th", "body": [ "<th>$0</th>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "thead": {  "prefix": "thead", "body": [ "<thead>$0</thead>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "time": {  "prefix": "time", "body": [ "<time>$0</time>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "title": {  "prefix": "title", "body": [ "<title>$0</title>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "tr": {  "prefix": "tr", "body": [ "<tr>$0</tr>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "track": {  "prefix": "track", "body": [ "<track>$0</track>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "tt": {  "prefix": "tt", "body": [ "<tt>$0</tt>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "u": {  "prefix": "u", "body": [ "<u>$0</u>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "ul": {  "prefix": "ul", "body": [ "<ul>$0</ul>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "var": {  "prefix": "var", "body": [ "<var>$0</var>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "video": {  "prefix": "video", "body": [ "<video>$0</video>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "wbr": {  "prefix": "wbr", "body": [ "<wbr>$0</wbr>" ], },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' // svg'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "svg":                 {  "prefix": "svg", "body": [ "<svg>$0</svg>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "animate":             {  "prefix": "animate", "body": [ "<animate>$0</animate>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "animateMotion":       {  "prefix": "animateMotion", "body": [ "<animateMotion>$0</animateMotion>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "animateTransform":    {  "prefix": "animateTransform", "body": [ "<animateTransform>$0</animateTransform>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "circle":              {  "prefix": "circle", "body": [ "<circle>$0</circle>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "clipPath":            {  "prefix": "clipPath", "body": [ "<clipPath>$0</clipPath>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "defs":                {  "prefix": "defs", "body": [ "<defs>$0</defs>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "desc":                {  "prefix": "desc", "body": [ "<desc>$0</desc>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "discard":             {  "prefix": "discard", "body": [ "<discard>$0</discard>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "ellipse":             {  "prefix": "ellipse", "body": [ "<ellipse>$0</ellipse>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "feBlend":             {  "prefix": "feBlend", "body": [ "<feBlend>$0</feBlend>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "feColorMatrix":       {  "prefix": "feColorMatrix", "body": [ "<feColorMatrix>$0</feColorMatrix>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "feComponentTransfer": {  "prefix": "feComponentTransfer", "body": [ "<feComponentTransfer>$0</feComponentTransfer>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "feComposite":         {  "prefix": "feComposite", "body": [ "<feComposite>$0</feComposite>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "feConvolveMatrix":    {  "prefix": "feConvolveMatrix", "body": [ "<feConvolveMatrix>$0</feConvolveMatrix>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "feDiffuseLighting":   {  "prefix": "feDiffuseLighting", "body": [ "<feDiffuseLighting>$0</feDiffuseLighting>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "feDisplacementMap":   {  "prefix": "feDisplacementMap", "body": [ "<feDisplacementMap>$0</feDisplacementMap>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "feDistantLight":      {  "prefix": "feDistantLight", "body": [ "<feDistantLight>$0</feDistantLight>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "feDropShadow":        {  "prefix": "feDropShadow", "body": [ "<feDropShadow>$0</feDropShadow>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "feFlood":             {  "prefix": "feFlood", "body": [ "<feFlood>$0</feFlood>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "feFuncA":             {  "prefix": "feFuncA", "body": [ "<feFuncA>$0</feFuncA>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "feFuncB":             {  "prefix": "feFuncB", "body": [ "<feFuncB>$0</feFuncB>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "feFuncG":             {  "prefix": "feFuncG", "body": [ "<feFuncG>$0</feFuncG>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "feFuncR":             {  "prefix": "feFuncR", "body": [ "<feFuncR>$0</feFuncR>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "feGaussianBlur":      {  "prefix": "feGaussianBlur", "body": [ "<feGaussianBlur>$0</feGaussianBlur>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "feImage":             {  "prefix": "feImage", "body": [ "<feImage>$0</feImage>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "feMerge":             {  "prefix": "feMerge", "body": [ "<feMerge>$0</feMerge>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "feMergeNode":         {  "prefix": "feMergeNode", "body": [ "<feMergeNode>$0</feMergeNode>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "feMorphology":        {  "prefix": "feMorphology", "body": [ "<feMorphology>$0</feMorphology>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "feOffset":            {  "prefix": "feOffset", "body": [ "<feOffset>$0</feOffset>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "fePointLight":        {  "prefix": "fePointLight", "body": [ "<fePointLight>$0</fePointLight>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "feSpecularLighting":  {  "prefix": "feSpecularLighting", "body": [ "<feSpecularLighting>$0</feSpecularLighting>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "feSpotLight":         {  "prefix": "feSpotLight", "body": [ "<feSpotLight>$0</feSpotLight>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "feTile":              {  "prefix": "feTile", "body": [ "<feTile>$0</feTile>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "feTurbulence":        {  "prefix": "feTurbulence", "body": [ "<feTurbulence>$0</feTurbulence>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "filter":              {  "prefix": "filter", "body": [ "<filter>$0</filter>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "foreignObject":       {  "prefix": "foreignObject", "body": [ "<foreignObject>$0</foreignObject>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "g":                   {  "prefix": "g", "body": [ "<g>$0</g>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "hatch":               {  "prefix": "hatch", "body": [ "<hatch>$0</hatch>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "hatchpath":           {  "prefix": "hatchpath", "body": [ "<hatchpath>$0</hatchpath>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "image":               {  "prefix": "image", "body": [ "<image>$0</image>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "line":                {  "prefix": "line", "body": [ "<line>$0</line>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "linearGradient":      {  "prefix": "linearGradient", "body": [ "<linearGradient>$0</linearGradient>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "marker":              {  "prefix": "marker", "body": [ "<marker>$0</marker>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "mask":                {  "prefix": "mask", "body": [ "<mask>$0</mask>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "mesh":                {  "prefix": "mesh", "body": [ "<mesh>$0</mesh>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "meshgradient":        {  "prefix": "meshgradient", "body": [ "<meshgradient>$0</meshgradient>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "meshpatch":           {  "prefix": "meshpatch", "body": [ "<meshpatch>$0</meshpatch>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "meshrow":             {  "prefix": "meshrow", "body": [ "<meshrow>$0</meshrow>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "metadata":            {  "prefix": "metadata", "body": [ "<metadata>$0</metadata>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "mpath":               {  "prefix": "mpath", "body": [ "<mpath>$0</mpath>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "path":                {  "prefix": "path", "body": [ "<path>$0</path>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "pattern":             {  "prefix": "pattern", "body": [ "<pattern>$0</pattern>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "polygon":             {  "prefix": "polygon", "body": [ "<polygon>$0</polygon>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "polyline":            {  "prefix": "polyline", "body": [ "<polyline>$0</polyline>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "radialGradient":      {  "prefix": "radialGradient", "body": [ "<radialGradient>$0</radialGradient>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "rect":                {  "prefix": "rect", "body": [ "<rect>$0</rect>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "set":                 {  "prefix": "set", "body": [ "<set>$0</set>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "stop":                {  "prefix": "stop", "body": [ "<stop>$0</stop>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "switch":              {  "prefix": "switch", "body": [ "<switch>$0</switch>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "symbol":              {  "prefix": "symbol", "body": [ "<symbol>$0</symbol>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "text":                {  "prefix": "text", "body": [ "<text>$0</text>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "textPath":            {  "prefix": "textPath", "body": [ "<textPath>$0</textPath>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "tspan":               {  "prefix": "tspan", "body": [ "<tspan>$0</tspan>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "unknown":             {  "prefix": "unknown", "body": [ "<unknown>$0</unknown>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "use":                 {  "prefix": "use", "body": [ "<use>$0</use>"] },'
- source: //
  scopes:
    - punctuation.definition.comment.json.comments
- source: ' "view":                {  "prefix": "view", "body": [ "<view>$0</view>"] },'
  scopesEnd:
    - comment.line.double-slash.js
- source: '}'
