# frozen_string_literal: true
require 'ruby_grammar_builder'
require 'walk_up'
require_relative walk_up_until("paths.rb")
require_relative './tokens.rb'

# 
# 
# create grammar!
# 
# 
grammar = Grammar.fromTmLanguage("./main/modified.tmLanguage.json")
grammar.name = ""
# grammar = Grammar.new(
#     name: "YOUR_LANGUAGE",
#     scope_name: "source.jsonc",
#     fileTypes: [
#         "jsonc",
#         # for example here are come C++ file extensions:
# 		#     "cpp",
# 		#     "cxx",
# 		#     "c++",
#     ],
#     version: "",
# )

# 
#
# Setup Grammar
#
# 
    grammar[:$initial_context] = [
        :value,
    ]

# 
# Helpers
# 
    # @space
    # @spaces
    # @digit
    # @digits
    # @standard_character
    # @word
    # @word_boundary
    # @white_space_start_boundary
    # @white_space_end_boundary
    # @start_of_document
    # @end_of_document
    # @start_of_line
    # @end_of_line
    part_of_a_variable = /[a-zA-Z_][a-zA-Z_0-9]*/
    # this is really useful for keywords. eg: variableBounds[/new/] wont match "newThing" or "thingnew"
    variableBounds = ->(regex_pattern) do
        lookBehindToAvoid(@standard_character).then(regex_pattern).lookAheadToAvoid(@standard_character)
    end
    variable = variableBounds[part_of_a_variable]
    
# 
# basic patterns
# 
    # overwrite the stringcontent
    grammar[:stringcontent] = [
        valid_escape = Pattern.new(
            tag_as: "constant.character.escape.json.comments",
            match: Pattern.new(/\\/).then(
                Pattern.new(/["\\\/bfnrt]/).or(/u[0-9a-fA-F]{4}/)
            ),
        ),
        invalid_escape = Pattern.new(
            tag_as: "invalid.illegal.unrecognized-string-escape.json.comments",
            match: Pattern.new(/\\\\./),
        )
    ]

#
# Save
#
name = "jsonc"
grammar.save_to(
    syntax_name: name,
    syntax_dir: "./autogenerated",
    tag_dir: "./autogenerated",
)